options:
  parameters:
    author: ctn008
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: tetraDMO_Decoder
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: tetraDMO_Decoder
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: next_view
  id: variable_qtgui_toggle_button_msg
  parameters:
    comment: ''
    gui_hint: ''
    initPressed: 'False'
    label: ''
    outputmsgname: value
    pressBackgroundColor: default
    pressFontColor: default
    pressed: '1'
    relBackgroundColor: default
    relFontColor: default
    released: '0'
    type: bool
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [312, 12.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '36000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 12]
    rotation: 0
    state: enabled
- name: view_step
  id: variable
  parameters:
    comment: ''
    value: 520*8
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [504, 12.0]
    rotation: 0
    state: enabled
- name: blocks_char_to_float_0_0
  id: blocks_char_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: '1'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [704, 156.0]
    rotation: 0
    state: enabled
- name: blocks_file_sink_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: /home/ctn008/tetraDMO-Transmitter/TxDMO_s36kBit.uint8
    type: byte
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1064, 244.0]
    rotation: 0
    state: disabled
- name: blocks_file_source_0
  id: blocks_file_source
  parameters:
    affinity: ''
    alias: ''
    begin_tag: pmt.PMT_NIL
    comment: ''
    file: /home/ctn008/tetraDMO-Receiver/RxDMO_pluto_s36kBit.uint8
    length: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    repeat: 'False'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 124.0]
    rotation: 0
    state: enabled
- name: blocks_throttle2_0
  id: blocks_throttle2
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    limit: auto
    maximum: '0.1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [264, 148.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\ndmoBurstSync\n- input is a stream\
      \ of demodulated bits (each bit in one byte)\n- output is a stream of consecutive\
      \ 510 bits (bytes) after burst synchronisation is detected.\n- consider to pass\
      \ tag along the data stream to indicate the type of burst ? Alternatively, can\
      \ use 34 guard bit as a burst header to fill in the necessary info or even use\
      \ extra bytes (on top of 510 bytes) as burst header. Using burst header has\
      \ the advantage of these headers can be stored together with data streams in\
      \ output files, maybe more convenient & easy for debug.\n\"\"\"\n\nimport numpy\
      \ as np\nfrom gnuradio import gr\n\nDSB = 1\nDNB = 2\nDNB_SF = 3\nINACTIVE =\
      \ 0\n\nclass dmoBurstSync(gr.basic_block):  # other base classes are basic_block,\
      \ decim_block, interp_block\n\n    NORMAL_TRAINING_SEQ_1       = (1,1,0,1,0,0,0,0,1,1,1,0,1,0,0,1,1,1,0,1,0,0)\
      \  # n1..n22\n    NORMAL_TRAINING_SEQ_2       = (0,1,1,1,1,0,1,0,0,1,0,0,0,0,1,1,0,1,1,1,1,0)\
      \  # p1..p22\n    NORMAL_TRAINING_SEQ_3_BEGIN = (0,0,0,1,1,0,1,0,1,1,0,1)  \
      \                    # q11..q22\n    NORMAL_TRAINING_SEQ_3_END   = (1,0,1,1,0,1,1,1,0,0)\
      \                          # q1..q10\n\n    SYNC_TRAINING_SEQ = (1,1,0,0,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,1,0,0,1,1,1,0,0,0,0,0,1,1,0,0,1,1,1)\
      \  # y1..y38\n\n    PREAMBLE_P1  =   (0,0,1,1,0,0,1,0,0,0,1,1)    # j1..j12\n\
      \    PREAMBLE_P2  =   (1,0,0,1,1,0,1,0,1,0,0,1)    # k1..k12\n    PREAMBLE_P3\
      \  =   (0,0,0,1,0,1,0,0,0,1,1,1)    # I1..I12\n\n    BURST_DETECT_THRESHOLD\
      \ = 4;\n\n    def __init__(self, dmoMode = True): \n        gr.basic_block.__init__(\n\
      \            self,\n            name='dmoBurstSync',     # will show up in GRC\n\
      \            in_sig=[np.uint8],\n            out_sig=[np.uint8]\n        )\n\
      \        self.dmoMode = dmoMode       # False means tmoMode\n        self.burstActive\
      \ = False\n        self.burstSynced = False\n        \n    def patternAtPositionScore(self,\
      \ bitstream, pattern, position):\n        patternScore = 0\n        for i in\
      \ range(len(pattern)):\n            if bitstream[position+i] != pattern[i]:\n\
      \                patternScore += 1\n        return patternScore\n\n    def isValidBurst(self,\
      \ bitstream, index, pointer):\n        \n        score_preamble_p1 = self.patternAtPositionScore(bitstream,\
      \ dmoBurstSync.PREAMBLE_P1, index + pointer+34)   # don't count 34 guard bits,\
      \ starts @ zero\n        score_preamble_p2 = self.patternAtPositionScore(bitstream,\
      \ dmoBurstSync.PREAMBLE_P2, index + pointer+34)   # don't count 34 guard bits\n\
      \        score_preamble_p3 = self.patternAtPositionScore(bitstream, dmoBurstSync.PREAMBLE_P3,\
      \ index + pointer+34)   # don't count 34 guard bits\n\n        scoreSync   \
      \ = self.patternAtPositionScore(bitstream, dmoBurstSync.SYNC_TRAINING_SEQ, \
      \    214 + index + pointer+34) # STS position DMO burst\n        scoreNormal1\
      \ = self.patternAtPositionScore(bitstream, dmoBurstSync.NORMAL_TRAINING_SEQ_1,\
      \ 230 + index + pointer+34) # NTS1 position DMO burst\n        scoreNormal2\
      \ = self.patternAtPositionScore(bitstream, dmoBurstSync.NORMAL_TRAINING_SEQ_2,\
      \ 230 + index + pointer+34) # NTS2 position DMO burst\n     \n        scoreNormal1\
      \ = int((scoreNormal1*38)/22)                                       # multifly\
      \ with 1.5 to be comparable with STS\n        scoreNormal2 = int((scoreNormal2*38)/22)\
      \ \n\n        scoreNormal1 += score_preamble_p1                            \
      \                  # combine bit errors of preamble & training sequences\n \
      \       scoreNormal2 += score_preamble_p2 \n        scoreSync    += score_preamble_p3\
      \ \n\n        # soft decision to detect burst: bit errors in preamble & training\
      \ sequence less than 6\n        scoreMin = scoreSync                       \
      \                            # if same score, Sync Burst is chosen\n       \
      \ burstType = DSB         \n\n        if (scoreNormal1 < scoreMin):\n      \
      \      scoreMin  = scoreNormal1 \n            burstType = DNB \n        if (scoreNormal2\
      \ < scoreMin):\n            scoreMin  = scoreNormal2 \n            burstType\
      \ = DNB_SF \n\n        if (scoreMin > dmoBurstSync.BURST_DETECT_THRESHOLD):\
      \                  # frame (burst) is matched and can be processed\n       \
      \     burstType = INACTIVE\n            \n        return (burstType, scoreMin)\n\
      \n\n    def general_work(self, input_items, output_items):\n\n        in_index\
      \ = 0\n        out_index = 0\n\n        while (len(input_items[0]) >= in_index\
      \ + 510) and (len(output_items[0]) >= out_index + 520):\n            # only\
      \ process the code below if more than 510 input data samples\n        \n   \
      \         if (not self.burstSynced):\n                for i in range(len(input_items[0])\
      \ - in_index - 286): # 286 = 34 + 12 + 2 + 216 + 22\n                    (burstType,\
      \ scoreMin) = self.isValidBurst(input_items[0], in_index, i)\n             \
      \       if (burstType):\n                        self.burstSynced = True\n \
      \                       break\n                in_index += i\n            else:\
      \          \n                (burstType, scoreMin) = self.isValidBurst(input_items[0],\
      \ in_index, 0)\n                if (burstType):\n                    self.burstActive\
      \ = True\n                else:\n                    self.burstActive = False\n\
      \n                output_items[0][out_index] = burstType\n                for\
      \ i in range(1,10):\n                    output_items[0][out_index+i] = 0\n\
      \            \n                for i in range(10, 520):\n                  \
      \  if burstType :\n                        output_items[0][out_index+i] = input_items[0][in_index+i-10]\n\
      \                    else:\n                        output_items[0][out_index+i]\
      \ = 0\n                in_index += 510\n                out_index += 520\n \
      \       self.consume(0, in_index) #consume port 0 input\n        return out_index\n"
    affinity: ''
    alias: ''
    comment: (10+510) burst
    dmoMode: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('dmoBurstSync', 'dmoBurstSync', [('dmoMode', 'True')], [('0', 'byte',
      1)], [('0', 'byte', 1)], '', ['dmoMode'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [496, 156.0]
    rotation: 0
    state: enabled
- name: epy_block_0_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.basic_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, step = 4800,\
      \ change = False):  # only default arguments here\n        \"\"\"arguments to\
      \ this function show up as parameters in GRC\"\"\"\n        gr.basic_block.__init__(\n\
      \            self,\n            name='Push_To_View',   # will show up in GRC\n\
      \            in_sig=[np.float32],\n            out_sig=[np.float32]\n      \
      \  )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.step=\
      \ step\n        self.change = change\n        self.prechange = False\n\n   \
      \ def general_work(self, input_items, output_items):\n        \"\"\"example:\
      \ multiply with constant\"\"\"\n        next_view = False\n        if self.change\
      \ != self.prechange :\n            print(\"Next View\")\n            next_view\
      \ = True\n            self.prechange = self.change\n        if next_view and\
      \ (len(output_items[0]) >= self.step) and (len(input_items[0]) >= self.step):\n\
      \           \n            for i in range(self.step):\n                output_items[0][i]\
      \ = input_items[0][i]\n        \n            self.consume(0, self.step) \n \
      \           return self.step\n        else:\n            return 0\n"
    affinity: ''
    alias: ''
    change: next_view
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    step: view_step
  states:
    _io_cache: ('Push_To_View', 'blk', [('step', '4800'), ('change', 'False')], [('0',
      'float', 1)], [('0', 'float', 1)], 'Embedded Python Block example - a simple
      multiply const', ['change', 'step'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [928, 148.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '0'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: view_step
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '3.2'
    ymin: '-0.2'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1272, 140.0]
    rotation: 0
    state: enabled

connections:
- [blocks_char_to_float_0_0, '0', epy_block_0_1, '0']
- [blocks_file_source_0, '0', blocks_throttle2_0, '0']
- [blocks_throttle2_0, '0', epy_block_0, '0']
- [epy_block_0, '0', blocks_char_to_float_0_0, '0']
- [epy_block_0, '0', blocks_file_sink_0, '0']
- [epy_block_0_1, '0', qtgui_time_sink_x_0_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.10.0
