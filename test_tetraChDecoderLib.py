"""
- perform the ctypes conversion to call codingLib dynamic library in c++
- inspect the coding functions whether being performed correctly or not by
feeding a sample burst input and check the result (uppMac_str). 
"""
from ctypes import *
import numpy as np

#std::vector<uint8_t> ptrVec(std::uint8_t* ptr, int size) 

lib = cdll.LoadLibrary('/home/ctn008/tetraDMO-Receiver/codec/tetraChDecoderLib.so') # class level loading lib

# C-type corresponding to numpy array 
ND_POINTER = np.ctypeslib.ndpointer(dtype=np.int16, 
                                      ndim=1,
                                      flags="C")
def Channel_Decoding(first_pass, Frame_Stealing, Input_Frame, Output_Frame):
    lib.Channel_Decoding.argtypes = [c_int16, c_int16, ND_POINTER, ND_POINTER]
    lib.Channel_Decoding.restype = c_int16
    res = lib.Channel_Decoding(first_pass, Frame_Stealing, Input_Frame, Output_Frame)
    return res

def Desinterleaving_Signalling(Input_Frame, Output_Frame):
    lib.Desinterleaving_Signalling.argtypes = [ND_POINTER, ND_POINTER]
    lib.Desinterleaving_Signalling.restype = c_int16
    res = lib.Desinterleaving_Signalling(Input_Frame, Output_Frame)
    return res

def Desinterleaving_Speech(Input_Frame, Output_Frame):
    lib.Desinterleaving_Speech.argtypes = [ND_POINTER, ND_POINTER]
    lib.Desinterleaving_Speech.restype = c_int16
    res = lib.Desinterleaving_Speech(Input_Frame, Output_Frame)
    return res
    

Loop_counter = 0
first_pass = True
Frame_Stealing = False
bfi1 = 0
bfi2 = 0
Reordered_array         = np.array([0]*286, dtype = 'int16')
Interleaved_coded_array = np.array([0]*432, dtype = 'int16')
Coded_array             = np.array([0]*432, dtype = 'int16')


u_plane16_1 = '111101100001001110110001111101100111000010100001111111000011000000000001111111000101001010100000001010100100000110110001001010000110001011110001110001010111110101000001110001010010111100010000011111100001001010100000011111000110100101000011011101010001010110110011011101000101001000000010110100000110000110110001110100000000100101000000100100010111110000100001100100001100011101100011101100001010011011110011101100000110100110110001'
u_plane17_1 = '001101110011011010011000110101011000000110101000001101101011011000000000101101000111101110101000001101111100000010011001100101101011001000111001001110001010001010100001100110001101110100110001010010110011111110101001011010000110101101010000010110000100000101101000111110000111101111110000010111010110001010011010110111010000010010100010000010000010111001100010010111010110011100110010011010000000000000111000001010010111011101101010'

first_pass - False
for i in range(432):
    # "0" = 127, "1" = -127
    Interleaved_coded_array[i] = 127 if u_plane16_1[i] == '0' else -127
    
Desinterleaving_Speech(Interleaved_coded_array, Coded_array)
bfi2 = Channel_Decoding(first_pass, Frame_Stealing, Coded_array, Reordered_array)
print("Channel decoding of full speech frame 16_1: ", bfi2)

for i in range(432):
    Interleaved_coded_array[i] = 127 if u_plane17_1[i] == '0' else -127
    
Desinterleaving_Speech(Interleaved_coded_array, Coded_array)
bfi2 = Channel_Decoding(first_pass, Frame_Stealing, Coded_array, Reordered_array)
print("Channel decoding of full speech frame 17_1: ", bfi2)

input("Press anykey to continue.")

in_frame =[0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, ]

out_frame=[ 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81]
out_frame1= [0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0xffffff81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f]

for i in range(432):
    Interleaved_coded_array[i] = np.int16(in_frame[i])

Desinterleaving_Speech(Interleaved_coded_array, Coded_array)

for i in range(432):
    if Coded_array[i] != np.int16(out_frame[i]):
        print("difference at i= ", i)
print("completed comparing outputs")

input("Press anykey to continue.")

for i in range(432):
    Coded_array[i] = np.int16(out_frame[i])

bfi2 = Channel_Decoding(first_pass, Frame_Stealing, Coded_array, Reordered_array)
print("Channel decoding of full speech out_frame: BFI= ", bfi2)

for i in range(432):
    Coded_array[i] = np.int16(out_frame1[i])

bfi2 = Channel_Decoding(first_pass, Frame_Stealing, Coded_array, Reordered_array)
print("Channel decoding of full speech out_frame1: BFI= ", bfi2)

"""
# C-type corresponding to numpy array 
ND_POINTER = np.ctypeslib.ndpointer(dtype=np.uint8, 
                                      ndim=1,
                                      flags="C")

def descramble(data, size, scramblingCode):
    lib.descramble_raw.argtypes = [ND_POINTER, c_size_t, ND_POINTER, c_size_t, c_size_t]
    lib.descramble_raw.restype = c_size_t
    res = np.array([0]*size, dtype='uint8')
    res_len = lib.descramble_raw(data, len(data), res, size, scramblingCode)
    print("descramble: ", res_len)
    return res

def deinterleave(data, K, a):
    lib.deinterleave_raw.argtypes = [ND_POINTER, c_size_t, ND_POINTER, c_size_t, c_size_t]
    lib.deinterleave_raw.restype = c_size_t
    res = np.array([0]*K, dtype='uint8')
    res_len = lib.deinterleave_raw(data, len(data), res, K, a)
    print("deinterleave: ", res_len)
    return res
    
def depuncture23(data, length):
    lib.depuncture23_raw.argtypes = [ND_POINTER, c_size_t, ND_POINTER, c_size_t]
    lib.depuncture23_raw.restype = c_size_t
    res = np.array([0]*(4*length*2//3), dtype='uint8')
    res_len = lib.depuncture23_raw(data, len(data), res, length)
    print("depuncture23: ", res_len)
    return res

def viterbiDecode1614(data):
    lib.viterbiDecode1614_raw.argtypes = [ND_POINTER, c_size_t, ND_POINTER]
    lib.viterbiDecode1614_raw.restype = c_size_t
    res = np.array([0]*(len(data)//4), dtype='uint8')
    res_len = lib.viterbiDecode1614_raw(data, len(data), res)
    print("viterbiDecode1614: ", res_len)
    return res

def checkCrc16Ccitt(data, length):
    lib.checkCrc16Ccitt_raw.argtypes = [ND_POINTER, c_size_t, c_size_t]
    lib.checkCrc16Ccitt_raw.restype = c_bool
    res_value = lib.checkCrc16Ccitt_raw(data, len(data), length)
    print("checkCrc16Ccitt: ", res_value)
    return res_value


burst_str = '000101000111101111111110000000000000000000000000000000000000000000000000000000000000001111111100001111111011001111011110011011010100000001110110111111111011100100101110101010111100000100111101000011010000101011100011000001100111001110110111000001100111110001110110110101010111101101001111000001000101100010100000011110111100001010100011010010001110100011001000000010111100001011111000000000010110111001010110100101110101101111111001010001000100101011010011001010001001000000001111111111111111111111111100000000' 
upMac_str = '1101000000001101110000000000000000000000000000000000000000000000000000100100000000000000001111101001010101110011001100110101110111000100000000011001000100001110000000000000000001000100'
bkn1 = np.array([0]*120, dtype='uint8')
bkn2 = np.array([0]*216, dtype='uint8')
for i in range(120):
    bkn1[i] = 0 if (burst_str[i+94] == '0') else 1 
for i in range(216):
    bkn2[i] = 0 if (burst_str[i+252] == '0') else 1 

bkn1 = descramble(bkn1, 120, 0x03)
bkn1 = deinterleave(bkn1, 120, 11)
bkn1 = depuncture23(bkn1, 120)
bkn1 = viterbiDecode1614(bkn1)

bkn2 = descramble(bkn2, 216, 0x03)
bkn2 = deinterleave(bkn2, 216, 101)
bkn2 = depuncture23(bkn2, 216)
bkn2 = viterbiDecode1614(bkn2)

print("CRC bkn1: ", checkCrc16Ccitt(bkn1, 76))
print("CRC bkn2: ", checkCrc16Ccitt(bkn2, 140))

res =''
for i in range(60):
    res += '1' if (bkn1[i]) else '0' 
for i in range(124):
    res += '1' if (bkn2[i]) else '0' 
if res == upMac_str:
    print("Correct output.")
else:
    print("Something wrong. Please investigate.")
    
# call function
#outSize = lib.descramble_raw(inData, inData.size, outData, inData.size, 0x03)


"""
